name: Compile Extensions

on:
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  setup:
    name: "Setup"
    runs-on: ubuntu-latest
    outputs:
      extension-path: ${{ steps.extract-extension-path.outputs.path }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3.3.0
      
    - name: Extract extension path
      id: extract-extension-path
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        pr_paths=$(gh pr view ${{ github.event.pull_request.number }} --json files)
        files_count=$(jq '.files | length' <<< ${pr_paths})
        if [[ $files_count -gt 1 ]]
        then
            echo "Only one extension per pull-request is allowed!"
            exit 1
        elif [[ $files_count -eq 0 ]]
        then
            echo "No extension was found"
            exit 1
        fi
        echo "path=$(jq -r '.files[0].path' <<< ${pr_paths})" >> $GITHUB_OUTPUT
      
    - name: Check extension path
      run: echo "${{ steps.extract-extension-path.outputs.path }}"

  build:
    name: "Build"
    needs: [ setup ]
    runs-on: ubuntu-latest
    outputs:
      artifact-name: ${{ steps.build_extension.outputs.artifact-name }}
      artifact-path: ${{ steps.build_extension.outputs.artifact-path }}
      manifest: ${{ steps.build_extension.outputs.manifest }}
        
    steps:
    - name: Checkout
      uses: actions/checkout@v3.3.0
      
    - name: Init Submodule
      run: git submodule update --init --recursive ./${{ needs.setup.outputs.extension-path }}
      
    - name: Build Extension
      id: build_extension
      uses: Macro-Deck-App/Actions/build-extension@main
      with:
        extension-path: ${{ needs.setup.outputs.extension-path }}
            
  deploy:
    name: "Deploy"
    needs: [ build ]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Download a Build Artifact
        uses: actions/download-artifact@v3.0.2
        with:
          name: ${{ needs.build.outputs.artifact-name }}
      
      - name: Upload built files
        id: upload-build-files
        env:
          MACRO_DECK_API_AUTH: "${{ secrets.MACRO_DECK_API_TOKEN }}"
        run: |
          curl --fail-with-body -o "./${{ fromJSON(needs.build.outputs.manifest).packageId }}-upload-response.json" -X POST \
            '${{ vars.EXTENSION_STORE_API_URL }}/rest/files/upload' \
            -H 'accept: */*' \
            -H "x-admin-token: $MACRO_DECK_API_AUTH" \
            -H 'Content-Type: multipart/form-data' \
            -F 'file=@${{ needs.build.outputs.artifact-path }};type=application/x-zip-compressed' || true
          response=$(cat "./${{ fromJSON(needs.build.outputs.manifest).packageId }}-upload-response.json")
          echo -e "Response:\n$response"
          echo "response=$(cat "./${{ fromJSON(needs.build.outputs.manifest).packageId }}-upload-response.json")" >> $GITHUB_OUTPUT
      
      - name: Check upload response
        if: |
          fromJSON(steps.upload-build-files.outputs.response).success == false &&
          fromJSON(steps.upload-build-files.outputs.response).errorCode != 4
        run: |
          echo "::error ::Failed to upload files to build server. Response: ${{ steps.upload-build-files.outputs.response }}" && exit 1
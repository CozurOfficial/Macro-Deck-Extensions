name: Add/Update Extension

on:
  workflow_dispatch:
    inputs:
      ext_type:
        required: true
        type: choice
        options:
        - 'Plugin'
        - 'Icon Pack'
      github_http_url:
        description: 'GitHub Repo HTTP URL'
        required: true
        type: string
      package_id:
        description: 'Package ID'
        required: true
        type: string
      commit_ref:
        description: 'Commit Ref (tag/branch/commit)'
        required: true
        type: string

permissions:
  contents: write
  pull-requests: write
  
jobs:
  pull_submodule:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      
      - name: Get Output Path
        id: ext_type_check
        run: |
          if [ ${{ inputs.ext_type }} = 'Plugin' ]; then 
            echo 'output_path=Plugins' >> $GITHUB_ENV
          else
            echo 'output_path=IconPacks' >> $GITHUB_ENV
          fi
      
      - name: Clean branch
        run: |
          git clean -xfd
          git submodule foreach --recursive git clean -xfd
          git reset --hard
          git submodule foreach --recursive git reset --hard
          git submodule update --init --recursive
          
      - name: Add Submodule (If Needed)
        id: add_submodule
        run: | 
          if [ ! -d "./${{ env.output_path }}/${{ inputs.package_id }}" ]; then
            git submodule add "${{ inputs.github_http_url }}" "./${{ env.output_path }}/${{ inputs.package_id }}"
          else
            git --git-dir "./${{ env.output_path }}/${{ inputs.package_id }}/.git" rev-parse HEAD | echo "current_hash=$(</dev/stdin)" >> $GITHUB_ENV
          fi
          
      - name: Update Submodule
        run: |
          cd "./${{ env.output_path }}/${{ inputs.package_id }}"
          git fetch origin "${{ inputs.commit_ref }}":"${{ inputs.commit_ref }}"
          git checkout "${{ inputs.commit_ref }}"
          cd ../..
          
      - name: Sanity Check
        run: |
          cd "./${{ env.output_path }}/${{ inputs.package_id }}"
          if [ ! -z "${{ env.current_hash }}" ]; then
            result=0
            
            # ExtensionManifest.json check
            old_manifest_version=$(git cat-file -p ${{ env.current_hash }}:ExtensionManifest.json | jq -r '[.version][0]')
            new_manifest_version=$(git cat-file -p HEAD:ExtensionManifest.json | jq -r '[.version][0]')
            if [ $old_manifest_version == $new_manifest_version ]; then
              echo "::error::ExtensionManifest.json 'version' key was not updated"
              result=1
            fi

            if [ ${{ inputs.ext_type }} = 'Plugin' ]; then 
              # csproj check
              old_csproj_version=$(git cat-file -p ${{ env.current_hash }}:$(ls *.csproj | head -n 1) | grep -oPm1 "(?<=<Version>)[^<]+")
              new_csproj_version=$(git cat-file -p HEAD:$(ls *.csproj | head -n 1) | grep -oPm1 "(?<=<Version>)[^<]+")
              if [ $old_csproj_version == $new_csproj_version ]; then
                echo "::error::csproj file 'version' node was not updated"
                result=1
              fi

              # ExntensionManifest <-> csproj check
              if [ ! -z $new_manifest_version ] && [ ! -z $new_csproj_version ] && [ $new_manifest_version != $new_csproj_version ]; then
                echo "::error::ExtensionManifest.json 'version' token does not match the csproj file's 'Version' node"
                result=1
              fi
            fi

            if [ $result -ne 0 ]; then
              exit 1
            fi
          else
            result=0
          
            # Manifest check
            manifest_version="$(git cat-file -p HEAD:ExtensionManifest.json | jq -r '[.version][0]')"
            if [ -z manifest_version ]; then 
              echo "::error::ExtensionManifest.json 'version' key does not exist"
              result=1
            fi
            
            if [ ${{ inputs.ext_type }} = 'Plugin' ]; then 
              # csproj check
              csproj_version="$(git cat-file -p HEAD:$(ls *.csproj | head -n 1) | grep -oPm1 "(?<=<Version>)[^<]+")"
              if [ -z csproj_version ]; then
                echo "::error::csproj file 'version' key does not exist"
                result=1
              fi

              # ExntensionManifest <-> csproj check
              if [ ! -z $manifest_version ] && [ ! -z $csproj_version ] && [ $manifest_version != $csproj_version ]; then
                echo "::error::ExtensionManifest.json 'version' token does not match the csproj file's 'Version' node"
                result=1
              fi
            fi
            
            if [ $result -ne 0 ]; then
              exit 1
            fi
          fi
          cd ../..
          
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: Update ${{ inputs.ext_type }} - ${{ inputs.package_id }}
          title: '[${{ inputs.ext_type }} Update] ${{ inputs.package_id }} => ${{ inputs.commit_ref }}'
          body: |
            ## ${{ inputs.ext_type }} Update
            
            <table>
              <tr>
                <td><b>Plugin Type</b></td>
                <td>${{ env.output_path }}</td>
              </tr>
              <tr>
                <td><b>GitHub HTTP URL</b></td>
                <td>${{ inputs.github_http_url }}</td>
              </tr>
              <tr>
                <td><b>Package ID</b></td>
                <td>${{ inputs.package_id }}</td>
              </tr>
              <tr>
                <td><b>Commit Ref</b></td>
                <td>${{ inputs.commit_ref }}</td>
              </tr>
            </table>
          branch: feature/update-${{ inputs.package_id }}
          delete-branch: true
